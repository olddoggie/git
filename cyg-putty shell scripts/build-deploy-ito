#!/usr/bin/bash
# This script is telling you how to build/deploy an application on ito-env in a simple way, NO effective every time!
echo "Notice this script only effective as a main flow, not as an almighty thing.."
echo ""
echo "!Careful before build/deploy, especically consider whether need initially using specific configuration files or different reversion of 1fb libs!"
echo "!Please modify corresponding build.properties && deploy.properties file on itobuild server FIRSTLY, attention to branh/trunk defination!"
echo "!If you need service as a global mapping,please do build service.jar at first, attention to branh/trunk defination!"
echo ""
echo "first param is ito app module (cs/csdemo/af/af1/af2/fs750/fscm/fsagent/services/afservice/ccms ...)"
echo "second param is the target script tag name you want to update to (e.g. BLEUM_ST_10252012_1 )"
echo "third param is the previous script tag name(e.g. BLEUM_IT_10232012_1)"
echo ""
echo "========================================================================================================================="
module=$1
currenttag=$2
previoustag=$3

file=~/temp-build-deploy.txt

function build-ito ()
{
build="build $1 -Dlabel=$2 -Dnojavadoc=1 all"
echo "${build}" >> $file
}

function predeploy-ito ()
{
predeploy="deploy prepare $1 ito"
echo "${predeploy}" >> $file
}

function copy-libs ()
{
echo "cp /1fb/home/build/stage/$1/$3/ito/libs/onefblibs/*.jar /1fb/home/build/stage/$1/$2/ito/libs/onefblibs" >> $file
}

function copy-war () # copy from itobuild server to ito oas server, for manually build
{
echo "scp /1fb/home/build/stage/$1/$2/ito/war/*.war oracle@ditoapv1.1fb.net:/1fb/home/oracle/oas/j2ee/home/onefblib/$3" >> $file
}

function deployall-ito ()
{
deployall="deploy all $1 ito ito789 "
echo "${deployall}" >> $file
}

function generate-command ()
{
	cat $file | awk 'BEGIN {while (getline < "/home/jack.wang/temp-build-deploy.txt" > 0) lc++}NR<lc{printf"%s && ",$0};NR==lc{print $0}'
	rm  $file
	echo "========================================================================================================================="
}

case $module in
  "cs")
				name=cs
				build-ito $name $currenttag
				predeploy-ito $name
				deployall-ito $name
				# ins2=csdemo.war
				# copy-war $ins2 $currenttag $ins2 # used for mannually deploy csdemo
				generate-command
			;;
  "af")	# instance1 and instance2, instance3 always legacy
			for name in afcollagent afcsragent
			do
				build-ito $name $currenttag
				predeploy-ito $name
				copy-libs $name $currenttag $previoustag
				deployall-ito $name
			done
			for ins2 in afcollagent2 afcsragent2
			do
				deployall-ito $ins2
			done
			# for ins3 in afcollagent3 afcsragent3
			# do
				# deployall-ito $ins3
			# done
			# for ins3 in afcollagent3.war afcsragent3.war
			# do
				# copy-war $name $currenttag $ins3
				# copy-war $name $currenttag $ins3
			# done
				generate-command
			;;
  "fs750") # instance name is fscm_mobile
				name=fscm_mobile
				ins2=fscm_mobile2.war
				build-ito $name $currenttag
				predeploy-ito $name
				copy-libs $name $currenttag $previoustag
				deployall-ito $name
				copy-war $name $currenttag $ins2 # used for mannually deploy fscm_mobile2
				generate-command
			;;
  "services")
				name=services
				build-ito $name $currenttag
				generate-command
			;;
  "afservice")
				name=afservice
				build-ito $name $currenttag
				generate-command
			;;
  "war")
				read -p "input the app name here: " name
				read -p "input the tag of generated war here: " tag
				read -p "input the display name of the war on ioas server (no need add suffix 'war')here:" ins
				copy-war $name $tag $ins".war"
				generate-command
			;;
	*) # used for other instance deployment, just input the instance name here
				build-ito $module $currenttag
				predeploy-ito $name
				deployall-ito $name
				generate-command
			;;
esac