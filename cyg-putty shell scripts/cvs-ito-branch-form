#!/usr/bin/bash
# This script is used for assisting CM Rep to strictly follow 1fb odc branch form when creating a branch on ito CVS
echo "Rationale is cvs rtag -r <tagroot> -<command> <tagname> project module"
echo "Branch Name convention usually be: <MODULE>_<Version>_<version>_<special suffix> e.g. AFF_3_50_Porting/FS_7_50"
echo "Branch Root tag convention should be: <branchname>_root e.g.AFF_3_50_Porting_root "
echo "!! After tag operation finishes, Do double check whether the tag operation is really and truely done correctly !!"
echo "first param is cvs module/project baseline folder(cs/af/fs750/fs/services ...)"
echo "second param is the target branch name you want to create"
echo "third param is the *Root tag (previous tag) name"
echo "Strictly follow the branch creation process, create ito branch After local branch has been created!"
echo "Pay attention for Afshared module, have to create branch on 'doc' module manually for the sake of UBS running."
echo "Do NOT forget to record this branch in CM Log."
echo ""
module=$1
branchname=$2
previoustag=$3
brchroot=$branchname\_root
itocvsroot=":ext:bbu@ito-as1.1fb.net:/vb/cvs"

read -p "Make sure you've already created the branch on local, and VPN connected now.. Press Enter"
read -p "Reason for branch creation usually be: accommodate multiple development paths,research on new features, or a production hot-fix..Press Enter"

function create-BRCHROOTtag ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Start creating branch root tag ..."
echo ""
source ~/bin/cvs-ito-tag-branch c $1 $2 $3
echo ""
fi
}
function create-branch ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
source ~/bin/cvs-ito-tag-branch cb $1 $2 $3
echo ""
fi
}
function variable-declaration ()
{
read -p "* Confirm the ito module(s) are to be branched is '$module'. Press Enter" 
read -p "* Confirm the ito branch name is '$branchname'. Press Enter" 
read -p "* Confirm the ito Root tag (previous tag) of the branch is based on '$previoustag'. Press Enter" 
rn1=n
while [ "$rn1" == "n" -o "$rn1" == "N"  ] 
do
read -p "* Confirm the second ito BRCHROOT tag on branch as the start is '$brchroot'. Press Enter/Input 'n' to rename the tag: " rn1
	if [ "$rn1" == "n" -o "$rn1" == "N" ]
	 then
	read -p "Identify a second ito BRCHROOT tag on branch as the start: " brchroot
	 else
	echo "BRCHROOT Correct."
	fi
done
echo ""
}
function input-command-tag ()
{
read -p "!(step 7.)!Is there any changes between the Root tag and the latest version that shall be initially kept on ito branch? n.No y.Yes :" key
echo ""
while [ "$key" != "y" -a "$key" != "Y" -a "$key" != "n" -a "$key" != "N" ] 
# Because there may be an empty input or input with space, so it shuold be like "$key", if using $key, maybe bash/shell will throw error '[: too many arguments'
 do
echo "I don't know what your choice is, please do answer again, confirm yes or no!"
read -p "!(step 7.)!Is there any changes between the ito Root tag and the ito latest version that shall be initially kept on ito branch? n.No y.Yes :" key
done
if [ $key == "y" -o $key == "Y" ]
 then
echo "1.Now you have to manually update files to the specific versions which will be initially kept on ito branch '$branchname'.."
echo "2.After then, please manually tag '$brchroot' on the specific files versions as an ito branch starting point.."
read -p "Confirm you've done the 2 steps above by pressing Enter, Not until then shall you go on ito branch creation...."
echo ""
read -p "The ito ROOT tag '$brchroot' is NOT same as ito past previous tag:'$previoustag',please based on '$brchroot' to create ito branch '$branchname'..PRESS Enter if done"
fi
if [ $key == "n" -o $key == "N" ]
 then
echo "Now creating BRCHROOT tag..." 
create-BRCHROOTtag $target_module $previoustag $brchroot
echo "The ito ROOT tag '$brchroot' is same as ito past previous tag:'$previoustag'"
echo ""
fi
}
function input-command-brch ()
{
read -p "Now we're going to create ito branch '$branchname' based on '$brchroot'.. Press Enter"
create-branch $target_module $previoustag $branchname
echo "The ito ROOT tag on ito branch which used to be tracked as a starting point is: '$brchroot'"
echo ""
echo "Thanks for your cooperation, now the ito branch '$branchname' is created successfully!"
}
function input-command-chk ()
{
read -p "But you'd rather do a check first, right? y.Yes n.No :" chk
while [ "$chk" != "y" -a "$chk" != "Y" -a "$chk" != "n" -a "$chk" != "N" ] 
 do
echo "I don't know what your choice is, please do answer again, confirm yes or no!"
read -p "Wanna do a check for the ito branch creation, right? y.Yes n.No :" chk
done
if [ $chk == "y" -o $chk == "Y" ]
 then
echo "Checking ..."
~/bin/cvs-ito-check-update $target_module $brchroot $branchname
echo ""
echo "Finish Checking,you can send out mail and update the CM Log now."
fi
if [ $chk == "n" -o $chk == "N" ]
 then
echo ""
echo "Sure,you can do mannual check later, then send out mail and update the CM Log."
fi
}
function fyi-notice ()
{
echo "just Attention for affinity............"
echo "You have to create branch on 'Afshared/doc' manually for the sake of UBS running."
echo "............"
fyi=y
while [ "$fyi" == "y" -o "$fyi" == "Y"  ] 
do
echo ""
read -p "If needed, besides 'src' and 'war' module, create the branch based on 'whole folder',ok? y.Yes n.No :" fyi
echo ""
if [ "$fyi" = "n" -o "$fyi" = "N" ]
 then
	echo "If needed, you still can create the branch based on 'whole folder'."
	break
fi
if [ "$fyi" = "y" -o "$fyi" = "Y" ]
 then
	echo "creating branch: 'branchname' based on '$previoustag' of whole project folder..." 
	# Rational is local only file always keep latest version on branch, so based on HEAD, create branch on these files, and the specific files will not be overwritten, since they've already been branched before.
	echo ""
	case "$1" in
  		"cs")
			folder_path=cs
			create-branch "$folder_path" $previoustag $branchname
		;;
  		"services")
			folder_path=services
			create-branch "$folder_path" $previoustag $branchname
		;;		
		"af")
			for folder_path in afcollagent afcsragent afshared
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;	
		"fs")
			for folder_path in fsagent fscm fsshared
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;
		"fs750")
			for folder_path in fscm fssplashcontent fsshared services
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;			
		"af360")
			for folder_path in afcollagent afcsragent afshared fsshared services
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;
		*)
			echo "Not implemented yet..."
		;;		
	esac
	break
else
	echo "I don't know your choice, yes or no?...."
	fyi=y
	continue
fi
done
echo ""
echo "OK....................................."
}
case $module in
  "af")
			module="afcollagent/src,afcollagent/war,afcsragent/war,afcsragent/src,afshared/src,afshared/war"
			variable-declaration
			for target_module in "afcollagent/src" "afcollagent/war" "afcsragent/src" "afcsragent/war" "afshared/src" "afshared/war"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""			
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice af
			;;
  "cs")
  			module="cs/src,cs/war"
			variable-declaration
			for target_module in "cs/src" "cs/war"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""			
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice cs
			;;
  "services")
  			module="services/src,services/mapping"
			variable-declaration  
			for target_module in "services/src" "services/mapping"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""						
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice services
			;;
  "fs750")
  			module="fscm/src,fscm/war,fsshared/src,fssplashcontent/src,fssplashcontent/war,services/src,services/mapping"
			variable-declaration  			
			for target_module in "fscm/src" "fscm/war" "fsshared/src" "fssplashcontent/src" "fssplashcontent/war" "services/src" "services/mapping"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""						
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice fs750
			;;
  "fs")
   			module="fsagent/src,fsagent/war,fscm/src,fscm/war,fsshared/src"
			variable-declaration   
			for target_module in "fsagent/src" "fsagent/war" "fscm/src" "fscm/war" "fsshared/src" 
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""						
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice fs
			;;			
	*)
			read -p "you are NOT Creating a branch according to any Original Planned Module(s), please be careful.. Press Enter"
			variable-declaration
			target_module=$module
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Skip."
			else
			echo ""
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			fyi-notice
			;;
esac