#!/usr/bin/bash
# This script is used for assisting CM Rep to strictly follow 1fb odc branch form when creating a branch
echo "Rationale is cvs rtag -r <tagroot> -<command> <tagname> project module"
echo "Branch Root tag convention should be: BLEUM_<MODULE>_BRCHROOT_<DATE>_<SN> e.g.BLEUM_CS_BRCHROOT_11112012_1 "
echo "Branch Name convention usually be: <MODULE>_<Version>_<version>_<special suffix> e.g. AFF_3_60/FS_7_50"
echo "!! After tag operation finishes, Do double check whether the tag operation is really and truely done correctly !!"
echo "first param is cvs module/project baseline folder(cs/af/fs750/fs/services ...)"
echo "second param is the target branch name you want to create"
echo "third param is the *Root tag (previous tag) name"
echo "Strictly follow the branch creation process, branch form can be found under: 1fbodc/Form/Project"
echo "FYI,If needed, besides 'src' and 'war' module, create the branch based on 'whole folder'."
echo "Do NOT forget to record this branch in CM Log."
echo ""
module=$1
branchname=$2
previoustag=$3
bleumcvsroot=":sspi:jack.wang@192.168.2.200:/1fb"

read -p "Reason for branch creation usually be: accommodate multiple development paths,research on new features, or a production hot-fix..Press Enter"
echo ""
echo "======================================================================"
echo "initial the valuable tags:"
echo ""
read -p "Module Name,e.g.AFFINITY: " mn
read -p "Date,e.g.11012012: " dt
brchroot="BLEUM_"$mn"_BRCHROOT_"$dt"_1"
echo "BRCHROOT: $brchroot"
echo "======================================================================"
echo ""
function create-BRCHROOTtag ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Start creating branch root tag ..."
echo ""
source ~/bin/cvs-local-tag-branch c "$1" $2 $3
echo ""
fi
}
function create-branch ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
source ~/bin/cvs-local-tag-branch cb "$1" $2 $3
echo ""
fi
}
function variable-declaration ()
{
read -p "* Confirm the module(s) are to be branched is '$module'. Press Enter" 
read -p "* Confirm the branch name is '$branchname'. Press Enter" 
read -p "* Confirm the Root tag (previous tag) of the branch is based on '$previoustag'. Press Enter" 
rn1=n
while [ "$rn1" == "n" -o "$rn1" == "N"  ] 
do
read -p "* Confirm the second BRCHROOT tag e.g. BLEUM_<MODULE>_BRCHROOT_<DATE>_<SN> on branch as the start point is '$brchroot'. Press Enter/Input 'n' to rename this tag: " rn1
	if [ "$rn1" == "n" -o "$rn1" == "N" ]
	 then
	read -p "Identify a second BRCHROOT tag e.g. BLEUM_<MODULE>_BRCHROOT_<DATE>_<SN> on branch as the start point: " brchroot
	 else
	echo "BRCHROOT Correct."
	fi
done
echo ""
}
function input-command-tag ()
{
read -p "!(step 7.)!Is there any changes between the Root tag and the latest version that shall be initially kept on branch? n.No y.Yes :" key
echo ""
while [ "$key" != "y" -a "$key" != "Y" -a "$key" != "n" -a "$key" != "N" ] 
# Because there may be an empty input or input with space, so it shuold be like "$key", if using $key, maybe bash/shell will throw error '[: too many arguments'
 do
echo "I don't know what your choice is, please do answer again, confirm yes or no!"
read -p "!(step 7.)!Is there any changes between the Root tag and the latest version that shall be initially kept on branch? n.No y.Yes :" key
done
if [ $key == "y" -o $key == "Y" ]
 then
echo "1.Now you have to manually update files to the specific versions which will be initially kept on '$branchname'.."
echo "2.After then, please manually tag '$brchroot' on the specific files versions as a branch starting point.."
read -p "Confirm you've done the 2 steps above by pressing Enter, Not until then shall you go on branch creation...."
echo ""
read -p "The ROOT tag '$brchroot' is NOT same as past previous tag:'$previoustag',please based on '$brchroot' to create branch '$branchname'..PRESS Enter if done"
fi
if [ $key == "n" -o $key == "N" ]
 then
echo "Now creating BRCHROOT tag..."
create-BRCHROOTtag "$target_module" $previoustag $brchroot
echo "The ROOT tag '$brchroot' is same as past previous tag:'$previoustag'"
echo ""
fi
}
function input-command-brch ()
{
read -p "Now we're going to create branch '$branchname' based on '$brchroot'..Press Enter"
create-branch "$target_module" $previoustag $branchname
echo "The ROOT tag on branch which used to be tracked as a starting point is: '$brchroot'"
echo ""
echo "Thanks for your cooperation, now the branch '$branchname' is created successfully!"
}
function input-command-chk ()
{
read -p "But you'd rather do a check first, right? y.Yes n.No :" chk
while [ "$chk" != "y" -a "$chk" != "Y" -a "$chk" != "n" -a "$chk" != "N" ] 
 do
echo "I don't know what your choice is, please do answer again, confirm yes or no!"
read -p "Wanna do a check for the branch creation, right? y.Yes n.No :" chk
done
if [ $chk == "y" -o $chk == "Y" ]
 then
echo "Checking ..."
~/bin/cvs-local-check-update "$target_module" $brchroot $branchname
echo ""
echo "Finish Checking,you can send out mail and update the CM Log now."
fi
if [ $chk == "n" -o $chk == "N" ]
 then
echo ""
echo "Sure,you can do mannual check later, then send out mail and update the CM Log."
fi
}
function fyi-notice ()
{
echo "just FYI............"
fyi=y
while [ "$fyi" == "y" -o "$fyi" == "Y"  ] 
do
echo ""
read -p "If needed, besides 'src' and 'war' module, create the branch based on 'whole folder',ok? y.Yes n.No :" fyi
echo ""
if [ "$fyi" = "n" -o "$fyi" = "N" ]
 then
	echo "If needed, you still can create the branch based on 'whole folder'."
	break
fi
if [ "$fyi" = "y" -o "$fyi" = "Y" ]
 then
	echo "creating branch: 'branchname' based on '$previoustag' of whole project folder..." 
	# Rational is local only file always keep latest version on branch, so based on HEAD, create branch on these files, and the specific files will not be overwritten, since they've already been branched before.
	echo ""
	case "$1" in
  		"cs")
			folder_path="csmaintenance/3.50/SourceCodeUBS"
			create-branch "$folder_path" $previoustag $branchname
		;;
  		"services")
			folder_path="services/Sourcecode"
			create-branch "$folder_path" $previoustag $branchname
		;;		
		"af")
			for folder_path in "affinity/sourcecode/afcollagent" "affinity/sourcecode/afcsragent" "affinity/sourcecode/afshared"
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;	
		"fs")
			for folder_path in "fs/Sourcecode/fsagent" "fs/Sourcecode/fscm" "fs/Sourcecode/fsshared"
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;
		"fs750")
			for folder_path in "fs/Sourcecode/fscm" "fs/Sourcecode/fssplashcontent" "fs/Sourcecode/fsshared" "services/Sourcecode"
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;			
		"af360")
			for folder_path in "affinity/sourcecode/afcollagent" "affinity/sourcecode/afcsragent" "affinity/sourcecode/afshared" "fs/Sourcecode/fsshared" "services/Sourcecode"
			do
				create-branch "$folder_path" $previoustag $branchname
			done
		;;
		*)
			echo "Not implemented yet..."
		;;		
	esac
	break
else
	echo "I don't know your choice, yes or no?...."
	fyi=y
	continue
fi
done
echo ""
echo "OK..................."
}

case $module in
  "af")
			module="afcollagent/src,afcollagent/war,afcsragent/war,afcsragent/src,afshared/src,afshared/war"
			variable-declaration
			for target_module in "affinity/sourcecode/afcollagent/src" "affinity/sourcecode/afcollagent/war" "affinity/sourcecode/afcsragent/src" "affinity/sourcecode/afcsragent/war" "affinity/sourcecode/afshared/src" "affinity/sourcecode/afshared/war"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""			
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice af 
			;;
  "cs")
  			module="cs/src,cs/war"
			variable-declaration
			for target_module in "csmaintenance/3.50/SourceCodeUBS/src" "csmaintenance/3.50/SourceCodeUBS/war"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""				
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice cs
			;;
  "services")
  			module="services/src,services/mapping"
			variable-declaration  
			for target_module in "services/Sourcecode/src" "services/Sourcecode/mapping"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""				
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice services
			;;
  "af360")
  			module="afcollagent/src,afcollagent/war,afcsragent/war,afcsragent/src,afshared/src,afshared/war,fsshared/src,services/src,services/mapping"
			variable-declaration
			for target_module in "affinity/sourcecode/afcollagent/src" "affinity/sourcecode/afcollagent/war" "affinity/sourcecode/afcsragent/src" "affinity/sourcecode/afcsragent/war" "affinity/sourcecode/afshared/src" "affinity/sourcecode/afshared/war" "fs/Sourcecode/fsshared/src" "services/Sourcecode/src" "services/Sourcecode/mapping"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""				
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice af360
			;;			
  "fs750")
  			module="fscm/src,fscm/war,fsshared/src,fssplashcontent/src,fssplashcontent/war,services/src,services/mapping"
			variable-declaration  			
			for target_module in "fs/Sourcecode/fscm/src" "fs/Sourcecode/fscm/war" "fs/Sourcecode/fsshared/src" "fs/Sourcecode/fssplashcontent/src" "fs/Sourcecode/fssplashcontent/war" "services/Sourcecode/src" "services/Sourcecode/mapping"
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""				
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice fs750
			;;
  "fs")
   			module="fsagent/src,fsagent/war,fscm/src,fscm/war,fsshared/src"
			variable-declaration   
			for target_module in "fs/Sourcecode/fsagent/src" "fs/Sourcecode/fsagent/war" "fs/Sourcecode/fscm/src" "fs/Sourcecode/fscm/war" "fs/Sourcecode/fsshared/src" 
			do
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""				
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			done
			fyi-notice fs
			;;			
	*)
			variable-declaration
			target_module="$module"
			read -p "input n to Skip whole Branch Creation on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Skip."
			else
			echo ""				
			input-command-tag
			input-command-brch
			input-command-chk
			echo ""
			fi
			;;
esac
