#!/usr/bin/bash
# This script processes command line by line, mainly to combine all the file list together and eliminates duplicates lines.
echo "Rational is using read Line and then do command based on each line output, pay attention to the double qoute on variables and IFS.."
echo "first param is ito cvs module (cs/af/fs750/fs/services...)"
echo "second param is target_folder you want to process on,(e.g./cygdrive/d/release/cs/file/CS7.81-CAT1)"
echo "*Pay attention that after final list generated, is there still existing any duplicate added/modified/deleted/SYNC file lines."
echo "After generation, compare the final list with the filelist generated by CVS."
echo ""
module=$1
target_folder="$2"
dir=~/final-file-list
copy=temp-copy.txt
input=temp-input.txt
temp=temp.txt

function initial ()
{
if [ -d $dir ]
  then
	rm -rf $dir
fi
echo "Creating directory final-file-list..."
mkdir $dir
source ~/bin/go $dir
echo "Initializing finished..."
echo ""
}
function cp-file ()
{
echo "Copying all '$2' txt files from '$1' to '$dir'..."
find  $1 | sort -t '-' -k4 | grep txt | grep $2 > $copy
declare -i i=0;while read LINE;do i=i+1;cp "$LINE" $2$i.txt; done < $copy
echo "Copy finished..."
echo ""
}
function grep-v ()
{
while read LINE
do
cat $temp | grep -v "$LINE" > $temp
done < $input
}
function grep-v-am ()
{
while read LINE
do
cat $temp | grep -v "A    $LINE" | grep "M    $LINE" | sed 's/M    /A    /g' >> $temp
cat $temp | grep -v "M    $LINE" | grep -v "A    $LINE \"added" > $temp
done < $input
}
function grep-v-md ()
{
while read LINE
do
cat $temp | grep -v "M    $LINE" > $temp
done < $input
}
function grep-v-ad ()
{
while read LINE
do
cat $temp | grep -v "A    $LINE" | grep -v "D    $LINE" > $temp
done < $input
}
function grep-v-sync ()
{
while read LINE
do
cat $temp | grep -v "A    $LINE" | grep -v "D    $LINE" > $temp
done < $input
}
function combine-file ()
{
# $1,$2 is origine file copied from $target_dir; $3 and $4 is temp files corresponding to $1,$2.
# $input and $temp are connective files with command grep-v
# the only output file is $5
cat $1 | awk '/^[A-Za-z0-9]/ {print $0}' | sort -u  > $1 | cut -d '"' -f1 $1 > $3
cat $2 | awk '/^[A-Za-z0-9]/ {print $0}' | sort -u  > $2 | cut -d '"' -f1 $2 > $4
comm -12 $3 $4 > $input
cp -f $1 $temp
grep-v
cp -f $2 $5 && cat $temp >> $5 && cat $5 | sort -u > $5
echo "Result has been generated into '$5'..."
echo ""
}
function final-list-gen ()
{
echo "Now you are going to combine all file list to make a final one for this CAT..."
cp-file  "$target_folder" $1
echo "Start combining file lists for '$target_folder's '$1' module..."
echo ""
declare -i sum=`ls "$1"*.txt |wc -l`
if [ $sum -eq 1 ]
 then
	cat "$1"1.txt | awk '/^[A-Za-z0-9]/ {print $0}' | sort -u  | tee $2
	echo "====== total $1 file num is ========"
	cat $2 | wc -l
	echo ""
else
	echo "Comparing first with second list ordered by build time..."
	echo ""
	combine-file "$1"1.txt "$1"2.txt temp-1.txt temp-2.txt $2
		if [ $sum -eq 2 ]
		 then
			echo ""
			echo "====== total $1 file num is ========"
			cat $2 | wc -l
			echo ""
		else
			echo ""
			echo "First comparision finished, now let's move on...."
			declare -i j=3
			while [ $j -le $sum ]
			do
			combine-file $2 "$1"$j.txt temp-result.txt temp-$j.txt $2
			j=j+1
			done
			echo "====== total $1 file num is ========"
			cat $2 | wc -l
			echo ""
		fi
fi
}
function eliminate-duplicate-amd ()
{
echo "Now you are going to elimainate duplicate lines in added/modified/deleted..."
echo ""
cp -f $1 $temp
echo "1.Added line should be removed and Modifyied line should be kept,while the first char should be A..."
echo ""
source ~/bin/cvs-local-filelist-compare ram
input=common-part-AM.txt
grep-v-am
echo "OK!"
echo "2.Modified line should be removed and Deleted line should be kept..."
echo ""
source ~/bin/cvs-local-filelist-compare rmd
input=common-part-MD.txt
grep-v-md
echo "OK!!"
echo "3.Added line should be removed and Deleted line also should be removed..."
echo ""
source ~/bin/cvs-local-filelist-compare rad
input=common-part-AD.txt
grep-v-ad
echo "OK!!!"
cat $temp | sort -u | tee $1
echo "====== final file list num '$1' is ========"
cat $1 | wc -l
echo ""
}
function eliminate-duplicate-sync ()
{
echo "Now you are going to elimainate duplicate lines between final list and SYNC List..."
echo ""
cp -f $1 temp.txt
echo "Duplicated line in sync list should be removed..."
echo ""
source ~/bin/cvs-local-filelist-compare sync
input=common-part-sync.txt
grep-v-sync
echo "OK!!!!"
cat $temp | sort -u | tee $result
echo "====== final file list num '$result' is ========"
cat $result | wc -l
echo ""
}
case $module in
  "cs")
		initial
		for target_module in cs-src cs-war
		do
			result=result-"$target_module".txt
			final-list-gen $target_module $result
		done
		echo ""
		read -p "Do you need elimintate potential duplicate A/M/D lines? input n to Skip...................... " sk
		echo ""
		if [ "$sk" = "n" -o "$sk" = "N" ]
		 then
			echo "Skip."
		else
			for result in result-cs-src result-cs-war
			do
				eliminate-duplicate-amd $result
			done
		fi
		for result in result-cs-src result-cs-war
		do
			eliminate-duplicate-sync $result
		done
		fi
		;;
  "af")
		final-list-gen afcollagent-src afcollagent-war
		final-list-gen afcsragent-src afcsragent-war
		final-list-gen afshared-src afshared-war
		;;
  "fs750")
		final-list-gen fscm-src fscm-war
		final-list-gen fsshared-src fsshared-war
		final-list-gen fssplashcontent-src fssplashcontent-war
		final-list-gen services-src services-mapping		
		;;
  "fs")
		final-list-gen fsagent-src fsagent-war
		final-list-gen fscm-src fscm-war
		final-list-gen fsshared-src fsshared-war
		;;
  "services")
		final-list-gen services-src services-mapping
		;;		
		*)
		echo "no such module yet..."
		exit 1
		;;
esac