#!/usr/bin/bash
# This script is used for assisting CM Rep to strictly follow 1fb merge form when merging codes from a branch to destination
echo "Rationale is cvs update -P -d -j<merge_startpoint> -j<merge_endpoint>"
echo "cvs status -Rq | grep Locally | xargs -i find -type f -newer <start file> -name {} | xargs cvs commit -m <comments>"
echo "first param is 1. cvs module name (cs/af/fs750/fs/services ...) Or 2. 'clean' (to clean the merge dir)"
echo "second param is the merge source tag, usually a branch name because always merge the latest codes from a branch(e.g. BLEUM_FS_CAT1_09272012_1/FS_7_50)"
echo "third param is the target destination tag, maybe HEAD because we always wanna merge to trunk".
echo "! Warning: Merge is done module by module,so please copy/record the intermediate temp-XXX.txt into Merge List (excel form) by each module in case of being Overwritten. !"
echo "BEFORE code CHKIN, If you wanna discharge the merge result,and do a clean merge again: update -P -A -d -C the module to Get a clean copy."
echo "Strictly follow the branch merge process, merge form can be found under: 1fbodc/Form/Project"
echo "Do NOT forget to record the final merge list and info of this merge into CM Log."
echo ""
module=$1
src_name=$2
dest_name=$3
bleumcvsroot=":sspi:jack.wang@192.168.2.200:/1fb"
mergedir=~/merge_`date +%Y-%m-%d-%H-%M-%S`
update_file=~/update_filelist.txt
temp_start=$mergedir/temp-merge-start.txt
total_changes=$mergedir/temp-merge-list.txt
temp_lcl=$mergedir/temp-locally-changes.txt
temp_mod=$mergedir/temp-locally-modifies.txt
temp_add=$mergedir/temp-locally-adds.txt # because added files' time stamp is that file's modified time, so cannot use $temp_start as comparison
temp_rm=$mergedir/temp-locally-removes.txt # because removed files are not existed in dest until finish merge, so cannot find them directly
temp_conflict=$mergedir/temp-conflicts.txt

echo "initial the valuable tags:"
echo ""
read -p "input n to Skip (Only when you just wanna 'clean' '$mergedir')...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "======================================================================"
read -p "Module Name,e.g.AFFINITY: " mn
read -p "Date,e.g.11012012: " dt
src="BLEUM_"$mn"_BRCHMERGE_SRC_"$dt"_1"
bf_dest="BLEUM_"$mn"_BRCHMERGE_before_DEST_"$dt"_1"
dest="BLEUM_"$mn"_BRCHMERGE_DEST_"$dt"_1"
echo "MERGE_SRC: $src "
echo "before MERGE_DEST: $bf_dest "
echo "MERGE_DEST: $dest "
echo "======================================================================"
fi
echo ""
if [ ! -d $mergedir ]
  then
	mkdir $mergedir
fi
echo "* Set the reference file '$temp_start' to Record the Merge Start Time. 1.if this is the First time you're running this script to start merge, Do NOT skip! 2.if you have already started merge before(this is not the first time you run this script), skip this step ..PRESS Enter"
sk=y
while [ "$sk" == "y" -o "$sk" == "Y"  ] 
do
read -p "input n to Skip / input y to do it...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
break
fi
if [ "$sk" = "y" -o "$sk" = "Y" ]
 then
echo "re-Newing '$temp_start'.. "
touch $temp_start # used for a reference of the beggining of merge, than any files locally changed later should be the result of merge
break
else
read -p "Confirm whether you really wanna re-New '$temp_start'. Press Enter/Input 'y' to approve re-New : " sk
	if [ "$sk" = "y" -o "$sk" = "Y" ]
	 then
	echo "re-Newing '$temp_start'.. "
	touch $temp_start
	break
	fi
	if [ "$sk" = "n" -o "$sk" = "N" ]
	 then
	echo "Skip."
	else
	sk=y # continue loop.
	fi
fi
done
echo ""
read -p "! Before merge, consider about the expected impacts on merge destination/other application ..Press Enter"
read -p "! Confirm with 1fb before perform code merge, especially for those sharing modules, e.g. services ..Press Enter"
read -p "Now you can send a mail to project team to announce !Code Freeze! on both source and destination branch/head.. Press Enter"
read -p "! Confirm all codes are checked in both source and destination branch/head.. Press Enter"
echo ""
function copy-intermediate ()
{
echo ""
echo "Copy intermediate files for this '$1' merge (auto CHKIN info) .."
temp_moment=`date +%H-%M-%S`
echo "$1" | awk -F '/' '{{for (i=1;i<NF;i++) printf "%s-",$i}{printf "%s\n",$i}}'| xargs -i mkdir $mergedir/"$temp_moment"_{}
cp -f $mergedir/*.txt $mergedir/"$temp_moment"*
echo ""
echo "Ok, go to next target_module.."
}
function create-tag ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
source ~/bin/cvs-local-tag-branch c "$1" $2 $3
fi
}
function update-code ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Just go to Working Folder "$1".."
source ~/bin/go /cygdrive/d/BleumCVS/"$1"
echo "Skip."
else
source ~/bin/go /cygdrive/d/BleumCVS/"$1" # go to the parent folder of the module you want to operate
rn0=n
nv="$1"
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
echo ""
echo "----------------- current dir -----------------"
pwd
echo "----------------- current dir -----------------"
echo ""
read -p "* Comfirm dir of module ('$nv') is specified correctly as above.. Press Enter/Input 'n' to re-navigate: " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	read -p "Please identify the Working Space you wanna navigate to: " nv
	source ~/bin/go /cygdrive/d/BleumCVS/"$nv"
	 else
	echo "Working Folder Correct."
	fi
done
echo "'$nv' module is now being updated to '$2' .."
case "$2" in
  "head")
			cvs -d $bleumcvsroot update -A -P -d
			;;
  "HEAD")
			cvs -d $bleumcvsroot update -A -P -d
			;;
  *)
			cvs -d $bleumcvsroot update -A -P -d -r $2
			;;
esac
			if [ $? -eq 1 ]
				then
				echo "Ooops...."
				echo "Command aborted, find the error msg above and do it again!"
				exit 1
			fi
fi
}
function generate-total-changes ()
{
read -p "input n to Skip (Recommand Not to Skip, because you need input total_changes_numbers here)...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo "Now start gererating the total file change list by rdiff the merge_root and merge_src"
~/bin/cvs-local-check-update "$1" $2 $3
cp $update_file $total_changes
echo "All the file changes between '$2' and '$3' has been written to '$total_changes', please record the total_changes_numbers..."
cat $total_changes | wc -l | awk '{print "<----------------Total: "$0-1" ------------------->"}'| tee -a $total_changes
rn0=n
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
cat $total_changes | wc -l | awk '{print "Finally,the total_changes_numbers is:  "$0-2" "}'
read -p "please record the total file list number: " total_changes_numbers
echo ""
read -p "Confirm the total_changes_numbers you recorded '$total_changes_numbers' is correct. Press Enter/Input 'n' to modify '$total_changes'and re-Count : " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	 read -p "Now Finalize the update file list (between '$2' and '$3'), if still got any changes, according to Merge List(excel form) Directly but Carefully Change '$total_changes', then re-Input the total_changes_numbers.. PRESS Enter"
	 echo ""
	 else
	echo "Number is Correct."
	fi
done
echo ""
read -p "!Warning: Make sure you copy the content of '$total_changes' into Merge List(excel form) for each module! Because module by module the previous '$total_changes' will be overwritten!.... PRESS Enter if done"
fi
}
function code-merge ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Start code merging ...."
echo ""
rn0=n
nv1="$1"
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
echo ""
echo "----------------- current dir -----------------"
pwd
echo "----------------- current dir -----------------"
echo ""
read -p "* Comfirm dir of module ('$nv1') is specified correctly as above.. Press Enter/Input 'n' to re-navigate: " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	read -p "Please identify the Working Space you wanna navigate to: " nv1
	source ~/bin/go /cygdrive/d/BleumCVS/"$nv1"
	 else
	echo "Working Folder Correct."
	fi
done
echo ""
echo "Start Code Merging...... "
cvs update -P -d -j $2 -j $3
echo ""
echo "Finish Code Merging, carefully deal with rollback,conflict,etc."
fi
}
function check-local-changes ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Start analyzing the lcoally modified files during merge ..."
echo ""
cvs st -Rq | grep "Locally Modified" |grep "File" | awk '{ {for(i = 2; i<NF; i++) printf "%s ",$i} printf "%s\n",$i}'| awk -F ' Status' '{print $1}'|xargs -i find ./ -type f -newer $temp_start -name {} > $temp_mod
echo "Now Check the result in file '$temp_mod' ... "
cat $temp_mod | wc -l
echo ""
echo "Start analyzing the lcoally added files during merge ..."
echo ""
cvs st -Rq | grep "Locally Added" |grep "File" | awk '{ {for(i = 2; i<NF; i++) printf "%s ",$i} printf "%s\n",$i}'| awk -F ' Status' '{print $1}'|xargs -i find ./ -type f -name {} > $temp_add
echo "Now Check the result in file '$temp_add' ... "
cat $temp_add | wc -l 
echo ""
echo "Start analyzing the lcoally removed files during merge ..."
echo ""
cvs st -Rq | grep "Locally Removed" | grep "File" | awk '{ {for(i = 2; i<NF; i++) printf "%s ",$i} printf "%s\n",$i}'| awk -F ' Status' '{print $1}'|awk -F 'no file ' '{print $2}' > $temp_rm
echo "Now Check the result in file '$temp_rm' ... "
cat $temp_rm | wc -l 
echo ""
echo "Now Check the whole result in file '$temp_lcl', please record the local_changes_numbers ... "
cat $temp_mod > $temp_lcl && cat $temp_add >> $temp_lcl && cat $temp_rm >> $temp_lcl
cat $temp_lcl | wc -l | awk '{print "<----------------Total: "$0" ------------------->"}'| tee -a $temp_lcl
rn0=n
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
cat $temp_lcl | wc -l | awk '{print "Finally,the local_changes_numbers is:  "$0-1" "}'
read -p "please record total local changes: " local_changes_numbers
echo ""
read -p "Confirm the local_changes_numbers you recorded '$local_changes_numbers' is correct. Press Enter/Input 'n' to modify '$temp_lcl'and re-Count : " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	 read -p "Now Finalize the local changed(added,removed,modified) file list , if still got any changes, according to Merge List(excel form) Directly but Carefully Change '$temp_lcl', then re-Input the local_changes_numbers.. PRESS Enter"
	 echo ""
	 else
	echo "Number is Correct."
	fi
done
echo ""
read -p "!Warning: Make sure you copy the content of '$temp_lcl' into Merge List(excel form) for each module! Because module by module the previous '$temp_lcl' will be overwritten!.... PRESS Enter if done"
fi
}
function check-conflicts ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Start analyzing the conflicts during merge,these part should be handled manaully by dev/tech leaders ..."
echo ""
cvs st -Rq | grep "File had conflicts on merge" |grep "File" | awk '{ {for(i = 2; i<NF; i++) printf "%s ",$i} printf "%s\n",$i}'| awk -F ' Status' '{print $1}'|xargs -i find ./ -type f -newer $temp_start -name {} > $temp_conflict
echo "Now Check the result in file '$temp_conflict', please record the conflicts_numbers ... "
cat $temp_conflict | wc -l | awk '{print "<----------------Total: "$0" ------------------->"}'| tee -a $temp_conflict
rn0=n
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
cat $temp_conflict | wc -l | awk '{print "Finally,the conflicts_numbers is:  "$0-1" "}'
read -p "please record total conflicts number: " conflicts_numbers
echo ""
read -p "Confirm the conflicts_numbers you recorded '$conflicts_numbers' is correct. Press Enter/Input 'n' to modify '$temp_conflict'and re-Count : " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	 read -p "Now Finalize the conflict file list , if still got any changes, according to Merge List(excel form) Directly but Carefully Change '$temp_conflict', then re-Input the conflicts_numbers.. PRESS Enter"
	 echo ""
	 else
	echo "Number is Correct."
	fi
done
echo ""
read -p "!Warning: Make sure you copy the content of '$temp_conflict' into Merge List(excel form) for each module! Because module by module the previous '$temp_conflict' will be overwritten!.... PRESS Enter if done"
fi
}
function check-sum ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
declare -i sum=$local_changes_numbers+$conflicts_numbers
echo "The lcoal change + conflicts list generated on step 10. should be totally same as the file list generated on step 5!"
	if [ $total_changes_numbers == $sum ]
	 then
	read -p "So far so good! The file numbers is equal for this merge: '$sum', let's move on .."
	 else
	read -p "Ooops! The file list in step 5 is: $total_changes_numbers , but the file list generated by cvs is: $sum , including local changes: $local_changes_numbers, plus conflicts: $conflicts_numbers . You've gotta check $total_changes,$temp_lcl and $temp_conflict for detail."
	echo ""
	echo "Now compare to see the detail ...."
	source ~/bin/go $mergedir
	file1=$mergedir/file_s5.txt
	file2=$mergedir/file_s10.txt
	output=compare-result.txt
	cat $total_changes | awk '/^[A-Za-z0-9]/ {print $0}'|gawk -F '/' '{a=NF; print $a}'|gawk -F ' is' '{print $1}'|gawk -F ' changed' '{print $1}'> $file1
	cat $temp_lcl > $file2 && cat $temp_conflict >> $file2 && cat $file2 | awk '/^[A-Za-z0-9.]/ {print $0}' | gawk -F '/' '{a=NF; print $a}' > $file2
	echo ""
	echo "input 1.<file_s5.txt> --->step5, 2.<file_s10.txt> --->step10 "
	~/bin/cvs-local-filelist-compare n
	echo ""
	echo "Check the detail differences in '$mergedir/$output'"
	echo ""
	read -p "Now you should have found the difference between 2 list, before we move on, make sure Record all the detailed info into merge list (excel form)/mereg form/CM Log.. PRESS Enter, and if there is any Special Action to take (attention to contents in bracket of step 10.), Remember to do it!"
	fi
echo ""
read -p "!Warning: Make sure you record the valuable info into Merge List(excel form) for each module! Because module by module the previous all the temp-XXX.txt will be overwritten!.... PRESS Enter if done"
fi
}
function check-rollbacks ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Start checking any roll back/not changed files exist, which means there's no difference between '$2' and '$3'..."
echo ""
~/bin/cvs-local-rollback-check "$1" $2 $3
echo ""
read -p "If there're any codes totally same, they need NOT to be merged since: 1. branch root and merge src are totally same; 2.merge src and dest before merge are already the same. After merge, you can just get clean copy, do NOT forget to mark these codes as NO Need merge in the Merge List!"
echo ""
read -p "!If any codes NO need merge, *directly* Remove them from '$temp_lcl' BEFORE script check in codes..PRESS Enter if done"
fi
}
function code-chkin ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Start checking in locally changes into cvs repository.."
echo ""
source ~/bin/go /cygdrive/d/BleumCVS/"$1"
rn0=n
nv2="$1"
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
echo ""
echo "----------------- current dir -----------------"
pwd
echo "----------------- current dir -----------------"
echo ""
read -p "* Comfirm dir of module ('$nv2') is specified correctly as above.. Press Enter/Input 'n' to re-navigate: " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	read -p "Please identify the Working Space you wanna navigate to: " nv2
	source ~/bin/go /cygdrive/d/BleumCVS/"$nv2"
	 else
	echo "Working Folder Correct."
	fi
done
echo ""
read -p "!Carefully review the CHKIN List: '$temp_lcl' BEFORE you Check in any codes..PRESS Enter"
read -p "!Draft the commit comments, e.g. 'AF3.50 CAT2: code merge from AFF_3_50_Porting branch': " comment
cm=n
while [ "$cm" == "n" -o "$cm" == "N"  ] 
do
read -p "Confirm the comments: '$comment'. Press Enter/Input 'n' to rename merge comments: " cm
	if [ "$cm" == "n" -o "$cm" == "N" ]
	 then
	read -p "!Draft the commit comments, e.g. 'AF3.50 CAT2: code merge from AFF_3_50_Porting branch': " comment
	echo ""
	 else
	echo "Comment is Correct."
	fi
done
read -p "! BEFORE code CHKIN, If you wanna discharge the merge result,and do a clean merge again: update -P -A -d -C the module to Get a clean copy."
read -p "! For the worst, after code CHKIN, still can roll back to '$bf_dest'..PRESS Enter to prepare check in list >>>"
echo ""
echo "Now CHKIN list '$temp_lcl' preparing...... "
cat $temp_lcl | awk '/^[^a-zA-Z0-9<-]/ {print $0}' > $temp_lcl # /^[^a-zA-Z0-9<-]/ is used for excluding any other lines except for "./XX/XX lines"
echo "Copy Removed files from '$temp_lcl' to '$total_changes'.."
cat $total_changes | grep "removed" | awk '{printf "./%s\n",$0}' | awk -F ' is' '{print $1}'| tee -a $temp_lcl
echo "CHKIN list '$temp_lcl' preparing Finished...... "
echo ""
read -p "!Again,Carefully review the CHKIN List: '$temp_lcl' BEFORE you Check in any codes..PRESS Enter"
echo ""
rn0=n
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
echo ""
cat $temp_lcl | wc -l | awk '{print "Finally,the Total local changes which should be Auto CHKIN by script is:  "$0" "}'
echo "Previously the local_changes_numbers in '$temp_lcl' you recorded is: '$local_changes_numbers'.. Compare with the above Num."
echo ""
read -p "! Confirm the CHKIN list Num as above. Press Enter/Input 'n' to modify '$temp_lcl'and re-Count : " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	 echo ""
	 read -p "Now Finalize the CHKIN list , if still got any changes before CHKIN, according to Merge List(excel form) Directly but Carefully Change '$temp_lcl'.. PRESS Enter"
	 echo ""
	 else
	echo "Number is Correct."
	fi
done
read -p "Confirm Files and Numbers are All correct? .. Input the auto CHKIN num: " auto_chkin_numbers
read -p "! Last Step. You sure no problems? .. PRESS Enter to CHKIN >>>"
echo "======================================================================"
echo "Now check in codes according to '$temp_lcl'.. "
cat $temp_lcl | awk '/^\./ {print $0}' | xargs cvs commit -m "$comment"
# awk '/^\./ {print $0}' is for the sake of filtering out line "<----------------Total: <file num>------------------->"
echo "Finished CHKIN $auto_chkin_numbers codes according to finalized '$temp_lcl'."
echo "======================================================================"
echo ""
read -p "!Warning: After Directly modify '$temp_lcl' and code check in, Make sure you record the valuable info ('$temp_lcl') into Merge List(excel form) for each module! Because module by module the previous all the temp-XXX.txt will be overwritten!.... PRESS Enter if done"
fi
}
function deal-conflicts ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "Time for handle conflicts, if any conflicts exist, please work with dev/Tech leaders ..."
echo ""
read -p "Is there any conflicts during merge on '$module'? y. yes, n. no: " yn
while [ "$yn" != "y" -a "$yn" != "Y" -a "$yn" != "n" -a "$yn" != "N" ]
 do
echo "I don't know what your choice is, please do answer again, confirm yes or no!"
read -p "Is there any conflicts during merge on '$module'? y. yes, n. no: " yn
done
	if [ $yn == "y" -o $yn == "Y" ]
	 then
	read -p "Confirm you've dealt with all the conflicts manually on '$module', Mark these files as conflict and the way how deal with them (manually merged or keep same as before merge) in Mege List.. PRESS Enter"
	echo ""
	read -p "Conflicts done, check them into repository manually in winCVS AFTER script auto check in local changes.. PRESS Enter"
	echo ""
	read -p "Now start Checking in modified files manually on '$module' >>>"
	echo ""
	echo "After deal with conflicts on '$module', all of the modified file have been checked in!"
	fi
	if [ $yn == "n" -o $yn == "N" ]
	 then
	read -p "Confirm there're no conflicts during this merge on '$module'.. PRESS Enter"
	echo "No conflicts in this merge!"
	fi
fi
}
function deal-special-file ()
{
read -p "input n to Skip...................... " sk
if [ "$sk" = "n" -o "$sk" = "N" ]
 then
echo "Skip."
else
echo ""
echo "If any Special Files (Record in step 10.) on '$module', deal with them NOW ..."
echo ""
read -p "Is there any Special Files (Record in step 10.) during merge on '$module'? y. yes, n. no: " yn1
while [ "$yn1" != "y" -a "$yn1" != "Y" -a "$yn1" != "n" -a "$yn1" != "N" ]
 do
echo "I don't know what your choice is, please do answer again, confirm yes or no!"
read -p "Is there any conflicts during merge on '$module'? y. yes, n. no: " yn
done
	if [ $yn1 == "y" -o $yn1 == "Y" ]
	 then
	read -p "Confirm you've dealt with all the Special Files manually on '$module', Record these files as well as the way how deal with them (manually merged or keep same as before merge) in Mege List(excel form).. PRESS Enter"
	echo ""
	read -p "Special Files Modified and Recorded, check them into repository manually in winCVS AFTER script auto check in local changes.. PRESS Enter"
	echo ""
	read -p "Now start Checking in modified files manually on '$module' >>>"
	echo ""
	echo "After deal with Special Files on '$module', all of the modified file have been checked in!"
	fi
	if [ $yn1 == "n" -o $yn1 == "N" ]
	 then
	read -p "Confirm there're no Special Files during this merge on '$module'.. PRESS Enter"
	echo "No Special Files in this merge!"
	fi
fi
}
function variable-declaration ()
{
echo "Now Merge starts ..."
read -p "* Confirm the module(s) of this merged is '$module'. Press Enter" 
read -p "* Confirm the merge source tag (usually branch name) is '$src_name'. Press Enter"
read -p "* Confirm the merge destination tag (maybe HEAD) is '$dest_name'. Press Enter" 
read -p "According to the merge process, there still have some variable you need define, see below -----> "
echo ""
read -p "* If this is first time of merge,specify tag as branch root tag. Otherwise,specify as the branch MERGE_SRC tag of last time.. e.g.BLEUM_<MODULE>_BRCHROOT_<DATE>_<SN>/BLEUM_<MODULE>_BRCHMERGE_SRC_<DATE>_<SN> of last time on SOURCE branch. Now identify the tag which will be used as Root Point of the source branch during this merge: " root
echo "variable declaration finished ..."
}
function main-merge ()
{
rn0=n
while [ "$rn0" == "n" -o "$rn0" == "N"  ] 
do
read -p "Confirm the root tag of Merge_SRC is '$root'. Press Enter/Input 'n' to rename this tag: " rn0
	if [ "$rn0" = "n" -o "$rn0" = "N" ]
	 then
	 read -p "* If this is first time of merge,specify tag as branch root tag. Otherwise,specify as the branch MERGE_SRC tag of last time.. e.g.BLEUM_<MODULE>_BRCHROOT_<DATE>_<SN>/BLEUM_<MODULE>_BRCHMERGE_SRC_<DATE>_<SN> of last time on SOURCE branch. Now identify the tag which will be used as Root Point of the source branch during this merge: " root
	 else
	echo "ROOT Correct."
	fi
done
echo "!(step 5.)!Start generating the total file changes (initial merge list) on SOURCE branch.."
generate-total-changes "$target_module" $root $src_name
echo ""
echo "Start creating the second Merge_SRC tag .."
rn1=n
while [ "$rn1" == "n" -o "$rn1" == "N"  ] 
do
read -p "Confirm the second Merge_SRC tag is '$src'. Press Enter/Input 'n' to rename this tag: " rn1
	if [ "$rn1" == "n" -o "$rn1" == "N" ]
	 then
	read -p "Identify a second Merge_SRC tag, e.g. BLEUM_<MODULE>_BRCHMERGE_SRC_<DATE>_<SN> : " src
	 else
	echo "BRCHMERGE_SRC Correct."
	fi
done
create-tag "$target_module" $src_name $src
echo ""
echo "Start creating the before_Merge_DEST tag .."
rn2=n
while [ "$rn2" == "n" -o "$rn2" == "N"  ] 
do
read -p "Confirm the before Merge_DEST tag is '$bf_dest'. Press Enter/Input 'n' to rename this tag: " rn2
	if [ "$rn2" == "n" -o "$rn2" == "N" ]
	 then
	read -p "Identify a before Merge_DEST tag e.g. BLEUM_<MODULE>_BRCHMERGE_before_DEST_<DATE>_<SN> on destination BEFORE merge: " bf_dest
	 else
	echo "before Merge_DEST Correct."
	fi
done
create-tag "$target_module" $dest_name $bf_dest
echo ""
echo "Updating to DESTINATION (maybe head)-- Mandatory! .."
update-code "$target_module" $dest_name
echo ""
echo "Merge ING .."
code-merge "$target_module" $root $src_name
echo ""
echo "Checking all local changes (added,removed,modified) .."
check-local-changes
echo ""
echo "Checking all conflicts (need manually check in later) .."
check-conflicts
echo ""
echo "Comparing the file numbers between step 5 and step 10 .."
check-sum
echo ""
echo "Checking any Roll back file between '$root' and '$src_name' (direcly modify '$temp_lcl', No need check in) ...."
check-rollbacks "$target_module" $root $src_name
echo ""
echo "Checking any No changes file between '$src_name' and '$bf_dest' (direcly modify '$temp_lcl', No need check in) ...."
check-rollbacks "$target_module" $src_name $bf_dest
echo ""
echo "Start Check ING codes.."
code-chkin "$target_module"
echo ""
}
function manual-chkin ()
{
echo ""
echo "Dealing with conflicts .."
deal-conflicts
echo ""
echo "Dealing with special files if exist (step 10.).."
deal-special-file
echo ""
read -p "* Confirm now you should have checked in all the necessary files into '$dest_name'.. Press Enter"
read -p "* If NOT yet, please wait until totally checked in, then tag MERGE_DEST on '$dest_name'.. Press Enter"
echo ""
echo "Start creating the Merge_DEST tag .."
echo ""
rn3=n
while [ "$rn3" == "n" -o "$rn3" == "N"  ] 
do
read -p "Confirm the after Merge_DEST tag is '$dest'. Press Enter/Input 'n' to rename this tag: " rn3
	if [ "$rn3" == "n" -o "$rn3" == "N" ]
	 then
	read -p "Identify an after Merge_DEST tag e.g. BLEUM_<MODULE>_BRCHMERGE_DEST_<DATE>_<SN> on destination AFTER merge: " dest
	 else
	echo "Merge_DEST Correct."
fi
done
}
function announce-finish ()
{
read -p "* After tag MERGE_DEST, finish recording the Merge List(excel form)/Merge Form/CM Log for this merge.. Press Enter"
echo ""
echo "That's it! Let's finish it thoroughly.."
read -p "Now you can send a mail to project team to announce !Code Merged! on '$module' from '$src_name' to '$dest_name' successful.. Press Enter"
read -p "!If the codes should be merged NOT ONLY in BLeun side, It's highly recommanded to DO a build for '$module'(check in latest codes to itoCVS) after Merge codes!"
read -p "Almost close, now provide Tech leaders with the Merge detail.. Press Enter"
read -p "Last but not least, update the 1fb CVS Branch Document.doc --> check into VSS --> notify sf team (wliu@1fbusa.com).. Press Enter"
echo ""
echo "Merge finished! Check in CM Log into CVS:/1fbodc/CM.."
}
function set-module ()
{
# In script you may define $module again, beasue it will be changed by other shell scripts..
module="$1"
}
case $module in
  "af")
			set-module "afcollagent/src,afcollagent/war,afcsragent/war,afcsragent/src,afshared/src,afshared/war"
			variable-declaration
			echo ""
			for target_module in "affinity/sourcecode/afcollagent/src" "affinity/sourcecode/afcollagent/war" "affinity/sourcecode/afcsragent/src" "affinity/sourcecode/afcsragent/war" "affinity/sourcecode/afshared/src" "affinity/sourcecode/afshared/war"
			do
			read -p "input n to Skip whole Merge Action on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""
			main-merge
			copy-intermediate "$target_module"
			fi
			done
			echo ""
			echo "Auto check in has been finished for those file changes.."
			echo ""
			echo "Now start manual checking in modified conflicts/special files.."
			set-module "afcollagent/src,afcollagent/war,afcsragent/war,afcsragent/src,afshared/src,afshared/war"
			manual-chkin
			echo ""
			target_module="af"
			create-tag "$target_module" $dest_name $dest
			echo ""
			set-module "afcollagent/src,afcollagent/war,afcsragent/war,afcsragent/src,afshared/src,afshared/war"
			announce-finish
			;;
  "cs")
  			set-module "cs/src,cs/war"
			variable-declaration
			echo ""
			for target_module in "csmaintenance/3.50/SourceCodeUBS/src" "csmaintenance/3.50/SourceCodeUBS/war"
			do
			read -p "input n to Skip whole Merge Action on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""
			main-merge
			copy-intermediate "$target_module"
			fi
			done
			echo ""
			echo "Auto check in has been finished for those file changes.."
			echo ""
			echo "Now start manual checking in modified conflicts/special files.."
  			set-module "cs/src,cs/war"			
			manual-chkin
			echo ""
			target_module="cs"
			create-tag "$target_module" $dest_name $dest
			echo ""
  			set-module "cs/src,cs/war"			
			announce-finish
			;;
  "services")
  			set-module "services/src,services/mapping"
			variable-declaration
			echo ""
			for target_module in "services/Sourcecode/src" "services/Sourcecode/mapping"
			do
			read -p "input n to Skip whole Merge Action on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""
			main-merge
			copy-intermediate "$target_module"
			fi
			done
			echo ""
			echo "Auto check in has been finished for those file changes.."
			echo ""
			echo "Now start manual checking in modified conflicts/special files.."
  			set-module "services/src,services/mapping"			
			manual-chkin
			echo ""
			target_module="services"
			create-tag "$target_module" $dest_name $dest
			echo ""
  			set-module "services/src,services/mapping"			
			announce-finish
			;;
  "fsshared")
  			set-module "fsshared/src"
			variable-declaration
			echo ""
			target_module="$module"
			read -p "input n to Skip whole Merge Action on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""
			main-merge
			copy-intermediate "$target_module"
			fi
			echo ""
			echo "Auto check in has been finished for those file changes.."
			echo ""
			echo "Now start manual checking in modified conflicts/special files.."
  			set-module "fsshared/src"			
			manual-chkin
			echo ""
			target_module="fsshared"
			create-tag "$target_module" $dest_name $dest
			echo ""
  			set-module "fsshared/src"			
			announce-finish
			;;			
  "fs750")
  			set-module "fscm/src,fscm/war,fsshared/src,fssplashcontent/src,fssplashcontent/war,services/src,services/mapping"
			variable-declaration
			echo ""
			for target_module in "fs/Sourcecode/fscm/src" "fs/Sourcecode/fscm/war" "fs/Sourcecode/fsshared/src" "fs/Sourcecode/fssplashcontent/src" "fs/Sourcecode/fssplashcontent/war" "services/Sourcecode/src" "services/Sourcecode/mapping"
			do
			read -p "input n to Skip whole Merge Action on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""
			main-merge
			copy-intermediate "$target_module"
			fi
			done
			echo ""
			echo "Auto check in has been finished for those file changes.."
			echo ""
			echo "Now start manual checking in modified conflicts/special files.."
  			set-module "fscm/src,fscm/war,fsshared/src,fssplashcontent/src,fssplashcontent/war,services/src,services/mapping"			
			manual-chkin
			echo ""
			target_module="fs750"
			create-tag "$target_module" $dest_name $dest
			echo ""
  			set-module "fscm/src,fscm/war,fsshared/src,fssplashcontent/src,fssplashcontent/war,services/src,services/mapping"			
			announce-finish
			;;
  "fs")
   			set-module "fsagent/src,fsagent/war,fscm/src,fscm/war,fsshared/src"
			variable-declaration
			echo ""
			for target_module in "fs/Sourcecode/fsagent/src" "fs/Sourcecode/fsagent/war" "fs/Sourcecode/fscm/src" "fs/Sourcecode/fscm/war" "fs/Sourcecode/fsshared/src" 
			do
			read -p "input n to Skip whole Merge Action on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Loop to next module."
			else
			echo ""
			main-merge
			copy-intermediate "$target_module"
			fi
			done
			echo ""
			echo "Auto check in has been finished for those file changes.."
			echo ""
			echo "Now start manual checking in modified conflicts/special files.."
   			set-module "fsagent/src,fsagent/war,fscm/src,fscm/war,fsshared/src"			
			manual-chkin
			echo ""
			target_module="fs"
			create-tag "$target_module" $dest_name $dest
			echo ""
   			set-module "fsagent/src,fsagent/war,fscm/src,fscm/war,fsshared/src"			
			announce-finish
			;;
  "clean")
			read -p "Are you sure you want to remove the '$mergedir' generated by script Today.."
			read -p "Make sure Today's Merge is totally done.."
			read -p "Make sure you've recorded all the merge info into Merge List/Merge Form/CM Log.."
			echo "Removing...."
			rm -rf $mergedir
			echo "I'll see you in an other life, brother! "
			;;
	*)
			variable-declaration
			echo ""
			target_module="$module"
			read -p "input n to Skip whole Merge Action on '$target_module'...................... " sk
			if [ "$sk" = "n" -o "$sk" = "N" ]
			 then
			echo "Skip."
			else
			echo ""
			main-merge
			copy-intermediate "$target_module"
			fi
			echo ""
			echo "Auto check in has been finished for those file changes.."
			echo ""
			echo "Now start manual checking in modified conflicts/special files.."
			manual-chkin
			echo ""
			create-tag "$target_module" $dest_name $dest
			echo ""
			announce-finish
			;;
esac
