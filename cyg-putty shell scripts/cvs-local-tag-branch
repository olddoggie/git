#!/usr/bin/bash
# This script is used for creating/deleting/renaming/force changing a tag on lcoal cvs modules
# Usage: cvs rtag [-abdFflnR] [-r rev|-D date] tag modules...
#        -a      Clear tag from removed files that would not ##otherwise be tagged.
#        -b      Make the tag a "branch" tag, allowing concurrent development.
#        -d      Delete the given tag.
#        -F      Move tag if it already exists.
#        -B      Allow move/delete of branch tag (not recommended).
#        -f      Force a head revision match if tag/date not found.
#        -l      Local directory only, not recursive.
#        -n      No execution of 'tag program'.
#        -R      Process directories recursively.
#        -r rev  Existing revision/tag.
#        -D      Existing date.
#(Specify the --help global option for a list of other help options)
echo "Rationale is cvs rtag -r <tagroot> -<command> <tagname> project module"
echo "!! After tag operation finishes, Do double check whether the tag operation is really and truely done correctly !!"
echo "first param is the Special operation command"
echo "second param is cvs module (cs/af/fs750/fs/services/ouputxml/databasexml/afservice ...)"
echo "third param is the tag root(e.g. BLEUM_AFFINITY_CAT4_11012011_1)"
echo "fourth param is the target tag name you want to create ( usually Head or: BLEUM_AFFINITY_CAT1_07272012_1 )"
echo "Special command: 1. f--force overwrite an existing tag, 2.r--rename a tag, 3.d--delete a tag, 4.c--create a new tag, *5.cb--create a new branch* )"
echo ""
command=$1
module=$2
tagroot=$3
tagname=$4
bleumcvsroot=":sspi:jack.wang@192.168.2.200:/1fb"

function tag-create ()
{
echo "Start creating tag ..."
echo ""
cvs -d $bleumcvsroot rtag -r $2 $3 "$1"
STAT=$?
echo ""
echo "Finish creating tag '$3' on '$1' module"
}

function tag-delete ()
{
echo "Start deleting tag ..."
echo ""
cvs -d $bleumcvsroot rtag -r $2 -d $2 "$1"
STAT=$?
echo ""
echo "Finish deleting tag '$2' on '$1' module"
}

function tag-create-force ()
{
echo "Start creating tag on force..."
echo ""
cvs -d $bleumcvsroot rtag -F -r $2 $3 "$1"
STAT=$?
echo ""
echo "Finish creating new tag '$3' on '$1' module"
}

function tag-rename ()
{
echo "Start renaming tag ..."
echo ""
cvs -d $bleumcvsroot rtag -r $2 $3 "$1"
cvs -d $bleumcvsroot rtag -r $2 -d $2 "$1"
STAT=$?
echo ""
echo "Finish renaming tag '$2' as '$3' on '$1' module"
}

function branch-create ()
{
echo "Start creating branch ..."
echo ""
cvs -d $bleumcvsroot rtag -r $2 -b $3 "$1"
STAT=$?
echo ""
echo "Finish creating branch '$3' on '$1' module"
}

function input-command ()
{
case $command in
  "f")
			tag-create-force "$target_module" $tagroot $tagname
			;;
  "r")
			tag-rename "$target_module" $tagroot $tagname
			;;
  "d")
			tag-delete "$target_module" $tagroot
			;;
  "c")
			tag-create "$target_module" $tagroot $tagname
			;;
  "cb")
			read -p "You are gonna create a BRCH '$tagname' on module '$target_module', please confirm your branchroot tag: '$tagroot' FIRST!"
			branch-create "$target_module" $tagroot $tagname
			;;			
	*)
			echo "No such kind of ant scirpt .."
			echo "Special command should be one of: 1.f--force overwrite an existing tag, 2.r--rename a tag then delete the old one, 3.d--delete a tag, 4.c--create a new tag!"
			exit 1
			;;
esac
}

case $module in
  "af")
			for target_module in "affinity/sourcecode/afcollagent/src" "affinity/sourcecode/afcollagent/war" "affinity/sourcecode/afcsragent/src" "affinity/sourcecode/afcsragent/war" "affinity/sourcecode/afshared/src" "affinity/sourcecode/afshared/war"
			do
			input-command
			echo ""
			done
			;;
  "cs")
			for target_module in "csmaintenance/3.50/SourceCodeUBS/src" "csmaintenance/3.50/SourceCodeUBS/war"
			do
			input-command
			echo ""
			done
			;;
  "services")
			for target_module in "services/Sourcecode/src" "services/Sourcecode/mapping"
			do
			input-command
			echo ""
			done
			;;
  "fs750")
			for target_module in "fs/Sourcecode/fscm/src" "fs/Sourcecode/fscm/war" "fs/Sourcecode/fsshared/src" "fs/Sourcecode/fssplashcontent/src" "fs/Sourcecode/fssplashcontent/war" "services/Sourcecode/src" "services/Sourcecode/mapping"
			do
			input-command
			echo ""
			done
			;;
  "fs")
			for target_module in "fs/Sourcecode/fsagent/src" "fs/Sourcecode/fsagent/war" "fs/Sourcecode/fscm/src" "fs/Sourcecode/fscm/war" "fs/Sourcecode/fsshared/src" 
			do
			input-command
			echo ""
			done
			;;			
	*)
			target_module="$module"
			input-command
			if [ $STAT -eq 1 ]
				then
				echo "Ooops...."
				echo "Command aborted, find the error msg above and do it again!"
				exit 1
			fi
			;;
esac